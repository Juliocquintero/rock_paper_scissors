{"version":3,"sources":["reportWebVitals.js","hoc/gameContext.js","ui/views/Game/SelectionButton/styles.js","ui/views/Game/SelectionButton/index.js","ui/views/Game/styles.js","ui/views/Game/index.js","ui/views/GameOver/styles.js","ui/views/GameOver/index.js","ui/App/styles.js","ui/App/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GameContext","createContext","GameProvider","children","useState","userSelection","setUserSelection","gameInCurse","setGameInCurse","results","setResults","useEffect","botElection","randomElection","HandleGameResults","Math","floor","random","result","data","handleSelection","option","playAgain","undefined","Provider","value","Button","styled","button","ButtonCaption","span","SelectionButton","onClick","className","SelectionButtonsWrapper","div","Game","map","el","i","GameOverWrapper","ButtonReset","Result","h2","ElectionsWrapper","Selection","SelectionResalted","GameOver","AppWrapper","Header","header","Title","h1","App","useContext","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2fd545b.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createContext, useEffect, useState } from 'react';\r\n\r\nconst GameContext = createContext();\r\n\r\nconst GameProvider = ({ children }) => {\r\n  const [userSelection, setUserSelection] = useState(null);\r\n  const [gameInCurse, setGameInCurse] = useState(true);\r\n  const [results, setResults] = useState({});\r\n\r\n  useEffect(() => {\r\n    const botElection = randomElection();\r\n    if (userSelection) HandleGameResults(userSelection, botElection);\r\n  }, [userSelection]);\r\n\r\n  const randomElection = () => {\r\n    const possiblesElection = ['rock', 'paper', 'scissors'];\r\n    const randomNumber = Math.floor(Math.random() * 3);\r\n    const electionCPU = possiblesElection[randomNumber];\r\n    return electionCPU;\r\n  };\r\n\r\n  const handleSelection = (option) => {\r\n    setUserSelection(option);\r\n  };\r\n\r\n  const HandleGameResults = (userSelection, botElection) => {\r\n    if (userSelection === botElection) {\r\n      //cuando el usuario  y la maquina (funcion jugadapc) elijan lo mismo, sera empate y se muestra la funcion de tie.\r\n      setResults({ userSelection, botElection, result: 'Tie' });\r\n    } else if (userSelection === 'rock' && botElection === 'scissors') {\r\n      //cuando el usuario elija piedra y la maquina (funcion jugadapc) elija tijeras, el usuario ganara y mostrara la funcion win\r\n      setResults({ userSelection, botElection, result: 'WIN' });\r\n    } else if (userSelection === 'paper' && botElection === 'rock') {\r\n      //cuando el usuario elija papel y la maquina (funcion jugadapc) elija piedra, el usuario ganara y mostrara la funcion win\r\n      setResults({ userSelection, botElection, result: 'WIN' });\r\n    } else if (userSelection === 'scissors' && botElection === 'paper') {\r\n      //cuando el usuario elija tijeras y la maquina (funcion jugadapc) elija papel, el usuario ganara y mostrara la funcion win\r\n      setResults({ userSelection, botElection, result: 'WIN' });\r\n    } else {\r\n      setResults({ userSelection, botElection, result: 'Loose' });\r\n    }\r\n    setGameInCurse(false);\r\n  };\r\n\r\n  const playAgain = () => {\r\n    setGameInCurse(true);\r\n    setResults({});\r\n    setUserSelection(undefined);\r\n  };\r\n\r\n  const data = { results, gameInCurse, handleSelection, playAgain };\r\n  return <GameContext.Provider value={data}>{children}</GameContext.Provider>;\r\n};\r\n\r\nexport { GameProvider };\r\nexport default GameContext;\r\n","import styled from 'styled-components';\r\n\r\nexport const Button = styled.button`\r\n  border: none;\r\n  background-color: transparent;\r\n  color: var(--orange-web);\r\n  font-size: 5rem;\r\n  line-height: 5rem;\r\n  cursor: pointer;\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  justify-content: center;\r\n  align-items: center;\r\n  outline: none;\r\n`;\r\n\r\nexport const ButtonCaption = styled.span`\r\n  color: var(--platinum);\r\n  font-size: 2rem;\r\n  text-transform: uppercase;\r\n`;\r\n","import { Button, ButtonCaption } from './styles';\r\n\r\nconst SelectionButton = ({ value, handleSelection }) => {\r\n  return (\r\n    <Button onClick={() => handleSelection(value)}>\r\n      <i className={`fas fa-hand-${value}`} />\r\n      <ButtonCaption>{value}</ButtonCaption>\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default SelectionButton;\r\n","import styled from 'styled-components';\r\n\r\nexport const SelectionButtonsWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  min-width: 300px;\r\n  width: 60%;\r\n  max-width: 768px;\r\n  margin: 5rem auto;\r\n`;\r\n","import SelectionButton from './SelectionButton';\r\nimport { SelectionButtonsWrapper } from './styles';\r\n\r\nexport const Game = ({ handleSelection }) => {\r\n  const OPTIONS_TO_SELECT = ['rock', 'paper', 'scissors'];\r\n  return (\r\n    <SelectionButtonsWrapper>\r\n      {OPTIONS_TO_SELECT.map((el, i) => (\r\n        <SelectionButton value={el} key={i} handleSelection={handleSelection} />\r\n      ))}\r\n    </SelectionButtonsWrapper>\r\n  );\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const GameOverWrapper = styled.div`\r\n  color: var(--platinum);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  margin: 3rem auto;\r\n`;\r\n\r\nexport const ButtonReset = styled.button`\r\n  display: flex;\r\n  border: 1px solid var(--Rich-Black);\r\n  border-radius: 3px;\r\n  background-color: rgba(10, 17, 31, 0.8);\r\n  color: var(--platinum);\r\n  width: 60%;\r\n  min-width: 220px;\r\n  max-width: 270px;\r\n  outline: none;\r\n  margin: 0 auto;\r\n  margin-top: 25px;\r\n  align-items: center;\r\n  text-align: center;\r\n  justify-content: center;\r\n  padding: 0.5rem;\r\n  font-size: 2rem;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const Result = styled.h2`\r\n  font-size: 3.5rem;\r\n  color: var(--platinum);\r\n`;\r\n\r\nexport const ElectionsWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 1rem;\r\n  margin: 3rem auto;\r\n`;\r\n\r\nexport const Selection = styled.span`\r\n  font-size: 2rem;\r\n  color: var(--platinum);\r\n`;\r\n\r\nexport const SelectionResalted = styled.span`\r\n  margin: 0 1rem;\r\n  font-size: 2.5rem;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  color: var(--Gold-crayola);\r\n`;\r\n","import React from 'react';\r\nimport {\r\n  ButtonReset,\r\n  ElectionsWrapper,\r\n  GameOverWrapper,\r\n  Result,\r\n  Selection,\r\n  SelectionResalted,\r\n} from './styles';\r\n\r\nconst GameOver = ({ results, playAgain }) => {\r\n  return (\r\n    <GameOverWrapper>\r\n      <div className=\"resultado\">\r\n        <Result> {results?.result}!</Result>\r\n      </div>\r\n\r\n      <ElectionsWrapper>\r\n        <Selection>\r\n          You\r\n          <SelectionResalted>{results?.userSelection}</SelectionResalted>\r\n        </Selection>\r\n\r\n        <h4>Vs</h4>\r\n\r\n        <Selection>\r\n          <SelectionResalted>{results?.botElection}</SelectionResalted>\r\n          CPU\r\n        </Selection>\r\n      </ElectionsWrapper>\r\n\r\n      <ButtonReset onClick={playAgain}>\r\n        Play Again\r\n        <i className=\"fas fa-undo-alt\" />\r\n      </ButtonReset>\r\n    </GameOverWrapper>\r\n  );\r\n};\r\n\r\nexport default GameOver;\r\n","import styled from 'styled-components';\r\n\r\nexport const AppWrapper = styled.div`\r\n  text-align: center;\r\n  background-color: var(--oxford-blue);\r\n  min-height: 100vh;\r\n  min-width: 320px;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  background-color: var(--Rich-Black);\r\n  min-height: 5vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: calc(10px + 2vmin);\r\n  color: white;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  margin-top: 3rem;\r\n  font-size: 4rem;\r\n  color: var(--platinum);\r\n`;\r\n","import { useContext } from 'react';\nimport GameContext from '../../hoc/gameContext';\nimport '../../styles/App.css';\nimport { Game } from '../views/Game';\nimport GameOver from '../views/GameOver';\nimport { AppWrapper, Header, Title } from './styles';\n\nconst App = () => {\n  const { results, gameInCurse, handleSelection, playAgain } = useContext(GameContext);\n  return (\n    <AppWrapper>\n      <Header></Header>\n      <Title>Rock Paper or Scissors</Title>\n      {gameInCurse ? (\n        <Game handleSelection={handleSelection} />\n      ) : (\n        <GameOver results={results} playAgain={playAgain} />\n      )}\n    </AppWrapper>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\n\nimport reportWebVitals from './reportWebVitals';\nimport App from './ui/App/App';\nimport { GameProvider } from './hoc/gameContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameProvider>\n      <App />\n    </GameProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}